================================================================================
================================================================================

                                Part A

--------------------------------------------------------------------------------

1. What is the purpose of having an individual handler function for each
exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the
same handler, what feature that exists in the current implementation could not
be provided?)

Answer:
The different handler functions allow us to push a different interrupt vector
number onto the stack, so that the Trapframe passed to the trap function has a
different interrupt number for each interrupt and we can do different things for
each.

--------------------------------------------------------------------------------

2. Did you have to do anything to make the user/softint program behave
correctly? The grade script expects it to produce a general protection fault
(trap 13), but softint‘s code says int $14. Why should this produce interrupt
vector 13? What happens if the kernel actually allows softint‘s int $14
instruction to invoke the kernel’s page fault handler (which is interrupt
vector 14)?

Answer:
I used the SETGATE macro for setting up the IDT. This sets a descriptor
privelege level, which is used to determine if the caller has the privelege to
call this interrupt directly. For interrupt 14 (page fault), this has a DPL of 0
meaning only level 0 (Kernel) can call this directly with the INT instruction.
When user mode tries to invoke this interrupt, this is not allowed and a general
protection exception (int $13) is called as a result.

================================================================================
================================================================================

                                Part B

--------------------------------------------------------------------------------
