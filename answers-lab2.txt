1. Assuming that the following JOS kernel code is correct, what type should variable x have, uintptr_t or physaddr_t?

mystery_t x;
char* value = return_a_pointer();
*value = 10;
x = (mystery_t) value;

Answer: x is holding a C pointer, which is a virtual address. So it should be type uintptr_t.

--------------------------------------------------------------------------------

2. What entries (rows) in the page directory have been filled in at this point? What addresses do they map and where do they point? In other words, fill out this table as much as possible:

    Entry   Base Virtual Address    Points to (logically)
    1023    0xFFC00000              Page table for top 4MB of phys memory
    1022    0xFF800000              ?
    .       ?                       ?
    960     0xF0000000 (KSTACKTOP)  bootstack+KSTKSIZE
    .       ?                       ?
    957     0xEF400000 (UPVT)       kern_pgdir (read only)
    956     0xEF000000 (UPAGES)     pages (read only)
    .       ?                       ?
    2       0x00800000              UTEXT
    1       0x00400000              UTEMP
    0       0x00000000  [see next question]

--------------------------------------------------------------------------------

3. We have placed the kernel and user environment in the same address space. Why will user programs not be able to read or write the kernelâ€™s memory? What specific mechanisms protect the kernel memory?

Answer: We set permissions on the individual pages to prevent them from being written to or read from when they shouldn't be. The permissions are applied through flags in the pagetable entries. In particular, the flag PTE_W sets the page to be writeable, and the flag PTE_U sets the page to be user readable.

--------------------------------------------------------------------------------

4. What is the maximum amount of physical memory that this operating system can support? Why?

Answer: 2GB
PTSIZE is 4MB, so there is 4MB of space reserved for UPAGES
Each struct PageInfo is 8 bytes, so the max number of pages is 512*1024 (4096*1024/8).
Each page is 4096 bytes of memory, so max memory is 512*1024*4096, or 2GB

--------------------------------------------------------------------------------

5. How much space overhead is there for managing memory, if we actually had the maximum amount of physical memory? How is this overhead broken down?

Answer: 4MB+2MB+4KB
4MB for struct PageInfo (as seen above)
2MB for pagetables
    Each pagetable is 4096bytes, can reference 1024pages*4096bytes=4MB of memory
    Therefore, 2GB/4MB=512 pagetables needed, 512*4096 bytes = 2MB
4KB for pagedir
    A pgdir is 4096 bytes, and can reference 1024 pagetables so only 1 is needed

--------------------------------------------------------------------------------

6. Revisit the page table setup in kern/entry.S and kern/entrypgdir.c. Immediately after we turn on paging, EIP is still a low number (a little over 1MB). At what point do we transition to running at an EIP above KERNBASE? What makes it possible for us to continue executing at a low EIP between when we enable paging and when we begin running at an EIP above KERNBASE? Why is this transition necessary?

Answer:
We transition into running at an EIP above KERNBASE when we jmp to relocated in entry.S.
The reason we can still execute at the low EIP is that entrypgdir.c maps both VA's [0,4MB) and VA's [KERNBASE, KERNBASE+4MB) to PA's [0, 4MB)
If it had only mapped the KERNBASE to KERNBASE+4MB VA's, then it would crash on the instruction after the one that enables paging.
This transition is necessary because we still have to execute some instructions to jump to a point above KERNBASE after paging is enabled (we cannot do this before enabling paging because KERNBASE doesn't refer to the place in physical memory where the kernel has been loaded)

--------------------------------------------------------------------------------

Challenge:
I chose to do the challenge to implement the JOS kernel monitor extensions. I
added showmappings, setperms, dumpp and dumpv commands. The show mappings shows
the pagetable mappings from VA to PA along with the permission bits that are
set. The setperms feature allows you to change permissions for the page that an
addries lies in. dumpp and dumpv allow you to dump memory contents at both a
physical and a virtual memory address (respectively). I implemented all of these
functions by adding them to kern/monitor.c, and including kern/pmap.h so that I
have access to the page mapping variables and functions such as pgdir_walk. I
also added my own function showallmappings that shows all of the valid page
mappings in the page directory.
